;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 2/27/2019
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega8A
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*******************************************************/
;
;#include <mega8.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdio.h>
;#include <delay.h>
;// Declare your global variables here
;#define NUMB_ROWS 4
;#define NUMB_COLS 8
;const int KEYPAD[NUMB_ROWS][NUMB_COLS]=     { {1 ,2 ,3 ,4 ,5 ,6 ,7 ,8 },
;                                              {11,12,13,14,15,16,17,18},
;                                              {21,22,23,24,25,26,27,28},
;                                              {31,32,33,34,35,36,37,38}  };
;unsigned long get_numb=0;
;void Keypad_Init();
;int Check_KPad();
;int Get_Key();
;void main(void)
; 0000 0027 {

	.CSEG
;PCODE: $0000000D VOL: 0
; 0000 0028 
; 0000 0029 Keypad_Init();
;PCODE: $0000000E VOL: 0
; 0000 002A // USART initialization
; 0000 002B // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 002C // USART Receiver: On
; 0000 002D // USART Transmitter: On
; 0000 002E // USART Mode: Asynchronous
; 0000 002F // USART Baud Rate: 9600
; 0000 0030 //UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
; 0000 0031 //UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
; 0000 0032 //UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
; 0000 0033 //UBRRH=0x00;
; 0000 0034 //UBRRL=0x33;
; 0000 0035 
; 0000 0036 while (1)
;PCODE: $0000000F VOL: 0
; 0000 0037       {
; 0000 0038             if(Check_KPad()==1)
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0039             {
; 0000 003A                 get_numb=Get_Key();
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 003B                 if(get_numb>15)
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 003C                 PORTC|=0x10;
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 003D                 else
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 003E                 PORTC&=~0x10;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 003F             }
;PCODE: $0000001F VOL: 0
; 0000 0040       }
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0041 }
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;
;/*-----Check Keypad if any key is pressed----//
; * Use input (rows) to check
; * If any row don't have value "1" --> at least one key pressed
; * retun 1
;*/
;int Check_KPad()
; 0000 0049 {
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 004A     int ui8_invalue=0;
; 0000 004B     PORTB=0;
;PCODE: $00000028 VOL: 0
;	ui8_invalue -> R16,R17
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 004C     ui8_invalue=PINC&0X0F;
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 004D     if(ui8_invalue!=0x0F)           return 1;
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 004E     else                            return 0;
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 004F }
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;
;/*Get the key are pressed in the  keyboard if detect at least one key is pressed//
; *Because all inputs pulls-up so they have value "0" if button is pressed
; *First set all outputs pin to 1, then clear col 0 (other have "1") to 0 to check
; *   if pressed button in col 0 by collects all inputs from rows ([1,2,3,4][1])
; *   if any inputs have "0" -> button pressed may have  1 4 7 * (in col 0)
; * -If no inputs have "0" so the button is another cols so check the next column and so on
;*/
;int Get_Key()
; 0000 0059 {
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 005A     unsigned char ui8_input=0;
; 0000 005B     unsigned char key_pressed=0;
; 0000 005C     unsigned char cur_col=0, cur_row=0;
; 0000 005D     unsigned char bit_count_col=1, bit_count_row=1;                      //start with bit 0 (PIN B0)
; 0000 005E     for(cur_col=0;cur_col<NUMB_COLS;cur_col++)
;PCODE: $00000041 VOL: 0
;	ui8_input -> R17
;	key_pressed -> R16
;	cur_col -> R19
;	cur_row -> R18
;	bit_count_col -> R21
;	bit_count_row -> R20
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 005F     {
; 0000 0060         PORTB=0xFF;                     //Set all outputs to 1
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0061         PORTB&=~bit_count_col;          //Clear 1 bit at a time
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0062         bit_count_col<<=1;              //Shift to next bit
;PCODE: $0000005F VOL: 0
; 0000 0063         bit_count_row=1;
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 0064         for(cur_row=0;cur_row<NUMB_ROWS;cur_row++)                //Check to see if the rows have "0"
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 0065         {                                                         //Specify the button in that column\
; 0000 0066             ui8_input=PINC&0x0F;                                  //Collect input value
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 0067             if((ui8_input&bit_count_row)==0)
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 0068             key_pressed=KEYPAD[cur_row][cur_col];                 //else check another cols
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 0069             bit_count_row<<=1;
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 006A         }
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 006B     }
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 006C     return key_pressed;
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 006D }
;PCODE: $0000008C VOL: 0
;
;void Keypad_Init()
; 0000 0070 {
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 0071     DDRB|=0xFF;         //PortB output (col)
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 0072     PORTC|=0x0F;       //C0->C4 input with pull-up (row)
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 0073     DDRC|=0x10;
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 0074 }
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
